{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/head/global-case.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","onClick","src","countryObject","alt","CardList","state","infoPaneVisible","infoObject","this","data","map","country","setState","width","height","viewBox","fill","xmlns","fill-rule","d","Component","GlobalCase","SearchBox","type","onChange","handleChange","placeholder","App","global","countries","searchField","lastUpdated","fetch","then","json","filteredCountries","filter","toLowerCase","includes","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d195a5ae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) =>\r\n    (\r\n        <div className=\"country-card\" onClick={props.onClick}>\r\n            <img className=\"card-flag\" src={`https://www.countryflags.io/${props.countryObject[\"CountryCode\"]}/flat/64.png`} alt=\"flag\"/>\r\n            <h3 className=\"country-name\">{props.countryObject[\"Country\"]}</h3>\r\n            <p>{\"Total confirmed : \" + props.countryObject[\"TotalConfirmed\"]}</p>\r\n            <p>{\"Total recovered : \" + props.countryObject[\"TotalRecovered\"]}</p>\r\n        </div>\r\n    );\r\n\r\n","import React, {Component} from \"react\";\r\nimport './card-list.style.css'\r\nimport {Card} from \"../card/card.component\";\r\n\r\n\r\nexport class CardList extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            infoPaneVisible: false,\r\n            infoObject: {}\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className={this.state.infoPaneVisible ? \"card-list col-lg-8\" : \"card-list col-lg-12\"}>\r\n                    {\r\n                        this.props.data.map(\r\n                            country => (\r\n                                <Card\r\n                                    countryObject={country}\r\n                                    onClick={() => {\r\n                                        this.setState(\r\n                                            state => {\r\n                                                return {\r\n                                                    infoPaneVisible: state.infoPaneVisible ? state.infoObject === country ? !state.infoPaneVisible : state.infoPaneVisible : !state.infoPaneVisible,\r\n                                                    infoObject: country\r\n                                                };\r\n                                            }\r\n                                        )\r\n                                    }}\r\n                                />\r\n                            )\r\n                        )\r\n                    }\r\n                </div>\r\n\r\n                {\r\n                    this.state.infoPaneVisible ? <div className={this.state.infoPaneVisible ? \"col-lg-4 info-pane\" : \"info-pane\"}>\r\n                        <div className=\"info-pane-header\">\r\n                            <h2 className=\"info-pane-country\">\r\n                                {this.state.infoObject[\"Country\"]}\r\n                            </h2>\r\n                            <img src={`https://www.countryflags.io/${this.state.infoObject[\"CountryCode\"]}/flat/64.png`}\r\n                                 alt=\"country flag\"/>\r\n\r\n                            <button\r\n                                className=\"close-btn\"\r\n                                onClick={() => {\r\n                                    this.setState(state => {\r\n                                        return {\r\n                                            infoPaneVisible: !state.infoPaneVisible\r\n                                        }\r\n                                    })\r\n                                }}\r\n                            >\r\n                                <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-x\" fill=\"currentColor\"\r\n                                     xmlns=\"http://www.w3.org/2000/svg\">\r\n                                    <path fill-rule=\"evenodd\"\r\n                                          d=\"M11.854 4.146a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708-.708l7-7a.5.5 0 0 1 .708 0z\"/>\r\n                                    <path fill-rule=\"evenodd\"\r\n                                          d=\"M4.146 4.146a.5.5 0 0 0 0 .708l7 7a.5.5 0 0 0 .708-.708l-7-7a.5.5 0 0 0-.708 0z\"/>\r\n                                </svg>\r\n                            </button>\r\n                        </div>\r\n                        <table className=\"table table-success\">\r\n                            <tbody>\r\n                            <tr>\r\n                                <td>New Confirmed</td>\r\n                                <td>{this.state.infoObject[\"NewConfirmed\"]}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Total Confirmed</td>\r\n                                <td>{this.state.infoObject[\"TotalConfirmed\"]}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>New Deaths</td>\r\n                                <td>{this.state.infoObject[\"NewDeaths\"]}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Total Deaths</td>\r\n                                <td>{this.state.infoObject[\"TotalDeaths\"]}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>New Recovered</td>\r\n                                <td>{this.state.infoObject[\"NewRecovered\"]}</td>\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Total Recovered</td>\r\n                                <td>{this.state.infoObject[\"TotalRecovered\"]}</td>\r\n                            </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div> : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n\r\n}","import React from \"react\";\r\n\r\nimport './global-case.style.css';\r\n\r\nexport const GlobalCase = props => (\r\n    <div className=\"global-case\">\r\n        <img className=\"globe-image\" src=\"https://i.gifer.com/W31X.gif\" alt=\"Globe gif\"/>\r\n        <div className=\"head\">\r\n            <h1>World Covid Data</h1>\r\n        </div>\r\n        <div className=\"info\">\r\n            <p>{\"New Confirmed : \" + props.data[\"NewConfirmed\"]}</p>\r\n            <p>{\"Total Confirmed : \" + props.data[\"TotalConfirmed\"]}</p>\r\n        </div>\r\n        <div className=\"info\">\r\n            <p>{\"New Deaths : \" + props.data[\"NewDeaths\"]}</p>\r\n            <p>{\"Total Deaths : \" + props.data[\"TotalDeaths\"]}</p>\r\n        </div>\r\n        <div className=\"info\">\r\n            <p>{\"New Recovered : \" + props.data[\"NewRecovered\"]}</p>\r\n            <p>{\"Total Recovered : \" + props.data[\"TotalRecovered\"]}</p>\r\n        </div>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = (props) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        onChange={props.handleChange}\r\n        placeholder={props.placeholder}\r\n    />\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {GlobalCase} from \"./components/head/global-case\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            global: {},\n            countries: [],\n            searchField: '',\n            lastUpdated: ''\n        }\n    }\n\n    async componentDidMount() {\n        fetch('https://api.covid19api.com/summary')\n            .then(data => data.json())\n            .then(data => this.setState({countries: data[\"Countries\"], global: data[\"Global\"], lastUpdated: data[\"Date\"]}))\n    }\n\n    render() {\n        let {countries, searchField} = this.state;\n        let filteredCountries = countries.filter(\n            country => country[\"Country\"].toLowerCase().includes(searchField.toLowerCase())\n        )\n        return (\n            <div className=\"App\">\n                <GlobalCase data={this.state.global}/>\n                <div className=\"last-updated-date\">\n                    <h6>Last Updated : {this.state.lastUpdated}</h6>\n                </div>\n                <SearchBox\n                    placeholder=\"search Country\"\n                    handleChange={(e) => {this.setState({searchField: e.target.value})}}\n                />\n                <CardList data={filteredCountries}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}