{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/head/global-case.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","countryObject","alt","CardList","data","map","country","onClick","document","querySelector","classList","toggle","GlobalCase","SearchBox","type","onChange","handleChange","placeholder","App","state","global","countries","searchField","fetch","then","json","setState","this","filteredCountries","filter","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2WAGaA,G,kBAAO,SAACC,GAAD,OAEZ,yBAAKC,UAAU,gBACX,yBAAKC,IAAG,sCAAiCF,EAAMG,cAAN,YAAjC,gBAAmFC,IAAI,SAC/F,wBAAIH,UAAU,gBAAgBD,EAAMG,cAAN,SAC9B,2BAAI,qBAAuBH,EAAMG,cAAN,gBAC3B,2BAAI,qBAAuBH,EAAMG,cAAN,mBCJ1BE,EAAW,SAACL,GAAD,OACpB,6BACI,yBAAKC,UAAU,aAEPD,EAAMM,KAAKC,KACP,SAAAC,GAAO,OACH,kBAAC,EAAD,CAAML,cAAeK,EAASC,QAC1B,WACIC,SAASC,cAAc,cAAcC,UAAUC,OAAO,aACtDH,SAASC,cAAc,cAAcC,UAAUC,OAAO,YACtDH,SAASC,cAAc,cAAcC,UAAUC,OAAO,mBAO9E,yBAAKZ,UAAU,gBClBVa,G,MAAa,SAAAd,GAAK,OAC3B,yBAAKC,UAAU,eACX,yBAAKA,UAAU,cAAcC,IAAI,+BAA+BE,IAAI,cACpE,yBAAKH,UAAU,QACX,iDAEJ,yBAAKA,UAAU,QACX,2BAAI,mBAAqBD,EAAMM,KAAN,cACzB,2BAAI,qBAAuBN,EAAMM,KAAN,iBAE/B,yBAAKL,UAAU,QACX,2BAAI,gBAAkBD,EAAMM,KAAN,WACtB,2BAAI,kBAAoBN,EAAMM,KAAN,cAE5B,yBAAKL,UAAU,QACX,2BAAI,mBAAqBD,EAAMM,KAAN,cACzB,2BAAI,qBAAuBN,EAAMM,KAAN,oBCjB1BS,G,MAAY,SAACf,GAAD,OACrB,2BACIC,UAAU,SACVe,KAAK,SACLC,SAAUjB,EAAMkB,aAChBC,YAAanB,EAAMmB,gBCgCZC,E,kDAjCX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,OAAQ,GACRC,UAAW,GACXC,YAAa,IALP,E,qLAUVC,MAAM,sCACDC,MAAK,SAAApB,GAAI,OAAIA,EAAKqB,UAClBD,MAAK,SAAApB,GAAI,OAAI,EAAKsB,SAAS,CAACL,UAAWjB,EAAI,UAAegB,OAAQhB,EAAI,Y,gIAGrE,IAAD,SAC0BuB,KAAKR,MAA/BE,EADA,EACAA,UAAWC,EADX,EACWA,YACZM,EAAoBP,EAAUQ,QAC9B,SAAAvB,GAAO,OAAIA,EAAO,QAAYwB,cAAcC,SAAST,EAAYQ,kBAErE,OACI,yBAAK/B,UAAU,OACX,kBAAC,EAAD,CAAYK,KAAMuB,KAAKR,MAAMC,SAC7B,kBAAC,EAAD,CACIH,YAAY,iBACZD,aAAc,SAACgB,GAAO,EAAKN,SAAS,CAACJ,YAAaU,EAAEC,OAAOC,WAE/D,kBAAC,EAAD,CAAU9B,KAAMwB,S,GA5BdO,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASoC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5b0c421e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) =>\r\n    (\r\n        <div className=\"country-card\">\r\n            <img src={`https://www.countryflags.io/${props.countryObject[\"CountryCode\"]}/flat/64.png`} alt=\"flag\"/>\r\n            <h3 className=\"country-name\">{props.countryObject[\"Country\"]}</h3>\r\n            <p>{\"Total confirmed : \" + props.countryObject[\"TotalConfirmed\"]}</p>\r\n            <p>{\"Total recovered : \" + props.countryObject[\"TotalRecovered\"]}</p>\r\n        </div>\r\n    );\r\n\r\n","import React from \"react\";\r\nimport './card-list.style.css'\r\nimport {Card} from \"../card/card.component\";\r\n\r\n\r\nexport const CardList = (props) => (\r\n    <div>\r\n        <div className=\"card-list\">\r\n            {\r\n                props.data.map(\r\n                    country => (\r\n                        <Card countryObject={country} onClick={\r\n                            () => {\r\n                                document.querySelector(\".card-list\").classList.toggle(\"col-lg-12\");\r\n                                document.querySelector(\".card-list\").classList.toggle(\"col-lg-6\");\r\n                                document.querySelector(\".info-pane\").classList.toggle(\"col-lg-6\");\r\n                            }}/>\r\n                    )\r\n                )\r\n            }\r\n        </div>\r\n\r\n        <div className=\"info-pane\">\r\n\r\n        </div>\r\n    </div>\r\n);","import React from \"react\";\r\n\r\nimport './global-case.style.css';\r\n\r\nexport const GlobalCase = props => (\r\n    <div className=\"global-case\">\r\n        <img className=\"globe-image\" src=\"https://i.gifer.com/W31X.gif\" alt=\"Globe gif\"/>\r\n        <div className=\"head\">\r\n            <h1>World Covid Data</h1>\r\n        </div>\r\n        <div className=\"info\">\r\n            <p>{\"New Confirmed : \" + props.data[\"NewConfirmed\"]}</p>\r\n            <p>{\"Total Confirmed : \" + props.data[\"TotalConfirmed\"]}</p>\r\n        </div>\r\n        <div className=\"info\">\r\n            <p>{\"New Deaths : \" + props.data[\"NewDeaths\"]}</p>\r\n            <p>{\"Total Deaths : \" + props.data[\"TotalDeaths\"]}</p>\r\n        </div>\r\n        <div className=\"info\">\r\n            <p>{\"New Recovered : \" + props.data[\"NewRecovered\"]}</p>\r\n            <p>{\"Total Recovered : \" + props.data[\"TotalRecovered\"]}</p>\r\n        </div>\r\n    </div>\r\n)","import React from \"react\";\r\nimport './search-box.style.css'\r\n\r\nexport const SearchBox = (props) => (\r\n    <input\r\n        className=\"search\"\r\n        type=\"search\"\r\n        onChange={props.handleChange}\r\n        placeholder={props.placeholder}\r\n    />\r\n)","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {GlobalCase} from \"./components/head/global-case\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            global: {},\n            countries: [],\n            searchField: ''\n        }\n    }\n\n    async componentDidMount() {\n        fetch('https://api.covid19api.com/summary')\n            .then(data => data.json())\n            .then(data => this.setState({countries: data[\"Countries\"], global: data[\"Global\"]}))\n    }\n\n    render() {\n        let {countries, searchField} = this.state;\n        let filteredCountries = countries.filter(\n            country => country[\"Country\"].toLowerCase().includes(searchField.toLowerCase())\n        )\n        return (\n            <div className=\"App\">\n                <GlobalCase data={this.state.global}/>\n                <SearchBox\n                    placeholder=\"search country\"\n                    handleChange={(e) => {this.setState({searchField: e.target.value})}}\n                />\n                <CardList data={filteredCountries}/>\n            </div>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}